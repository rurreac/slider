before:
  hooks:
    - go mod tidy
builds:
  # You can have multiple builds defined as a yaml list
  - binary: slider_{{ .Os }}_{{ .Arch }}
    # Custom ldflags.
    #
    # Default: '-s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.Date}} -X main.builtBy=goreleaser'
    # Templates: allowed
    ldflags:
      - -s -w
      - -X slider/pkg/conf.version={{.Version}}
      - -X slider/pkg/conf.binOS={{.Os}}
      - -X slider/pkg/conf.binArch={{.Arch}}
      - -X slider/pkg/conf.commit={{.Commit}}
      - -X slider/pkg/conf.date={{.Date}}
      - -X slider/pkg/conf.goVer={{.Env.GOVERSION}}
    # Custom environment variables to be set during the builds.
    # Invalid environment variables will be ignored.
    #
    # Default: os.Environ() ++ env config section
    # Templates: allowed (since v1.14)
    env:
      - GOVERSION={{ .Env.GOVERSION }}
      - CGO_ENABLED=1
    overrides:
      - goos: 'linux'
        goarch: 'amd64'
        env:
          - CC=gcc
      - goos: 'linux'
        goarch: '386'
        env:
          - CC=gcc -m32
      - goos: 'windows'
        env:
          - CGO_ENABLED=0
    # GOOS list to build for.
    # For more info refer to: https://golang.org/doc/install/source#environment
    #
    # Default: [ 'darwin', 'linux', 'windows' ]
    goos: ['linux', 'windows']
    # GOARCH to build for.
    # For more info refer to: https://golang.org/doc/install/source#environment
    #
    # Default: [ '386', 'amd64', 'arm64' ]
    goarch: ['386', 'amd64']
    # By default, GoReleaser will create your binaries inside
    # `dist/${BuildID}_${BuildTarget}`, which is a unique directory per build
    # target in the matrix.
    # You can set subdirs within that directory using the `binary` property.
    #
    # However, if for some reason you don't want that unique directory to be
    # created, you can set this property.
    # If you do, you are responsible for keeping different builds from
    # overriding each other.
    no_unique_dist_dir: true
changelog:
  sort: asc
  filters:
    exclude:
      - "^doc:"
      - "^action:"
upx:
  - enabled: true
    goos: ['linux', 'windows']
    goarch: ['386']
    # Compress argument.
    # Valid options are from '1' (faster) to '9' (better), and 'best'.
    compress: best
    # Whether to try LZMA (slower).
    lzma: true
    # Whether to try all methods and filters (slow).
    brute: true
  - enabled: true
    goos: ['linux', 'windows']
    goarch: ['amd64']
    compress: best
    lzma: true
    brute: true
checksum:
  name_template: {{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}_checksum.txt
archives:
  - # Archive format.
    #
    # If format is `binary`, no archives are created and the binaries are instead
    # uploaded directly.
    #
    # Valid options are `tar.gz`, `tgz`, `tar.xz`, `txz`, tar`, `gz`, `zip`, and `binary`.
    # Default: 'tar.gz'
    format: tar.gz
    format_overrides:
      - # Which GOOS to override the format for.
        goos: 'windows'

        # The format to use for the given GOOS.
        #
        # Valid options are `tar.gz`, `tgz`, `tar.xz`, `txz`, tar`, `gz`, `zip`, `binary`, and `none`.
        format: zip
